var documenterSearchIndex = {"docs":
[{"location":"library/overview/#library","page":"Library Functions","title":"Library Functions","text":"","category":"section"},{"location":"library/overview/#FMIFlux-functions","page":"Library Functions","title":"FMIFlux functions","text":"","category":"section"},{"location":"library/overview/","page":"Library Functions","title":"Library Functions","text":"ME_NeuralFMU\nCS_NeuralFMU\nNeuralFMU\nNeuralFMUInputLayer\nNeuralFMUOutputLayer\n\nNeuralFMUCacheTime\nNeuralFMUCacheState","category":"page"},{"location":"library/overview/#FMIFlux.ME_NeuralFMU","page":"Library Functions","title":"FMIFlux.ME_NeuralFMU","text":"Structure definition for a NeuralFMU, that runs in mode Model Exchange (ME).\n\n\n\n\n\n","category":"type"},{"location":"library/overview/#FMIFlux.CS_NeuralFMU","page":"Library Functions","title":"FMIFlux.CS_NeuralFMU","text":"Structure definition for a NeuralFMU, that runs in mode Co-Simulation (CS).\n\n\n\n\n\n","category":"type"},{"location":"library/overview/#FMIFlux.NeuralFMU","page":"Library Functions","title":"FMIFlux.NeuralFMU","text":"The mutable struct representing an abstract (simulation mode unknown) NeuralFMU.\n\n\n\n\n\n","category":"type"},{"location":"library/overview/#FMI-version-independent-functions","page":"Library Functions","title":"FMI version independent functions","text":"","category":"section"},{"location":"library/overview/","page":"Library Functions","title":"Library Functions","text":"fmiDoStepME\nfmiDoStepCS\nfmiInputDoStepCSOutput","category":"page"},{"location":"library/overview/#FMIFlux.fmiDoStepME","page":"Library Functions","title":"FMIFlux.fmiDoStepME","text":"Wrapper. Call fmi2DoStepME for more information.\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#FMIFlux.fmiDoStepCS","page":"Library Functions","title":"FMIFlux.fmiDoStepCS","text":"Wrapper. Call fmi2DoStepCS for more information.\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#FMIFlux.fmiInputDoStepCSOutput","page":"Library Functions","title":"FMIFlux.fmiInputDoStepCSOutput","text":"Wrapper. Call fmi2InputDoStepCSOutput for more information.\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#Additional-functions","page":"Library Functions","title":"Additional functions","text":"","category":"section"},{"location":"library/overview/","page":"Library Functions","title":"Library Functions","text":"mse_interpolate\ntransferParams!","category":"page"},{"location":"library/overview/#FMIFlux.mse_interpolate","page":"Library Functions","title":"FMIFlux.mse_interpolate","text":"Compares non-equidistant (or equdistant) datapoints by linear interpolating and comparing at given interpolation points t_comp.  (Zygote-friendly: Zygote can differentiate through via AD.)\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#FMIFlux.transferParams!","page":"Library Functions","title":"FMIFlux.transferParams!","text":"Writes/Copies training parameters from p_net to net with data offset c.\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#FMI-2-version-dependent-functions","page":"Library Functions","title":"FMI 2 version dependent functions","text":"","category":"section"},{"location":"library/overview/","page":"Library Functions","title":"Library Functions","text":"fmi2DoStepME\nfmi2DoStepCS\nfmi2InputDoStepCSOutput","category":"page"},{"location":"library/overview/#FMIFlux.fmi2DoStepME","page":"Library Functions","title":"FMIFlux.fmi2DoStepME","text":"Performs something similar to fmiDoStep for ME-FMUs (note, that fmiDoStep is for CS-FMUs only). Event handling (state- and time-events) is supported. If you don't want events to be handled, you can disable event-handling for the NeuralFMU nfmu with the attribute eventHandling = false.\n\nOptional, additional FMU-values can be set via keyword arguments setValueReferences and setValues. Optional, additional FMU-values can be retrieved by keyword argument getValueReferences.\n\nFunction takes the current system state array (\"x\") and returns an array with state derivatives (\"x dot\") and optionally the FMU-values for getValueReferences. Setting the FMU time via argument t is optional, if not set, the current time of the ODE solver around the NeuralFMU is used.\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#FMIFlux.fmi2DoStepCS","page":"Library Functions","title":"FMIFlux.fmi2DoStepCS","text":"Performs a fmiDoStep for CS-FMUs (note, that fmiDoStep is for CS-FMUs only).\n\nOptional, FMU-values can be set via keyword arguments setValueReferences and setValues. Optional, FMU-values can be retrieved by keyword argument getValueReferences.\n\nFunction returns the FMU-values for the optional keyword argument getValueReferences. The CS-FMU performs one macro step with step size dt. Dependent on the integrated numerical solver, the FMU may perform multiple (internal) micro steps if needed to meet solver requirements (stability/accuracy). These micro steps are hidden by FMI2.\n\n\n\n\n\n","category":"function"},{"location":"library/overview/#FMIFlux.fmi2InputDoStepCSOutput","page":"Library Functions","title":"FMIFlux.fmi2InputDoStepCSOutput","text":"Sets all FMU inputs to u, performs a ´´´fmi2DoStep´´´ and returns all FMU outputs.\n\n\n\n\n\n","category":"function"},{"location":"examples/simple_hybrid_CS/#Creation-and-training-of-CS-NeuralFMUs","page":"Simple CS-NeuralFMU","title":"Creation and training of CS-NeuralFMUs","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Tutorial by Johannes Stoljar, Tobias Thummerer","category":"page"},{"location":"examples/simple_hybrid_CS/#License","page":"Simple CS-NeuralFMU","title":"License","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Johannes Stoljar","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Licensed under the MIT license. See LICENSE file in the project root for details.","category":"page"},{"location":"examples/simple_hybrid_CS/#Motivation","page":"Simple CS-NeuralFMU","title":"Motivation","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"This Julia Package is motivated by the application of hybrid modeling. This package enables the user to integrate his simulation model between neural networks (NeuralFMU). For this, the simulation model must be exported as FMU (functional mock-up unit), which corresponds to a widely used standard. The big advantage of hybrid modeling with artificial neural networks is, that effects that are difficult to model (because they might be unknown) can be easily learned by the neural networks. For this purpose, the NeuralFMU is trained with measurement data containing the unmodeled physical effect. The final product is a simulation model including the orignially unmodeled effects. Another big advantage of the NeuralFMU is that it works with little data, because the FMU already contains the characterisitic functionality of the simulation and only the missing effects are added.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"NeuralFMUs need not to be as easy as in this example. Basically a NeuralFMU can combine different ANN topologies that manipulate any FMU-input (system state, system inputs, time) and any FMU-output (system state derivative, system outputs, other system variables). However, for this example a NeuralFMU topology as shown in the following picture is used.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"(Image: CS-NeuralFMU.svg)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"NeuralFMU (CS) from [1].","category":"page"},{"location":"examples/simple_hybrid_CS/#Introduction-to-the-example","page":"Simple CS-NeuralFMU","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"In this example, the model of a one-dimensional spring pendulum (with an external acting force) is used to learn the initial states. For this purpose, on the one hand the initial position of the mass of the pendulum is shifted and on the other hand the default position of the mass from the model is used. The model with the shifted initial position serves as reference and is called referenceFMU in the following. The model with the default position is further referenced with defaultFMU. At the beginning, the actual state of both simulations is shown, whereby clear deviations can be seen in the graphs. Afterwards, the defaultFMU is integrated into a co-simulation NeuralFMU (CS-NeuralFMU) architecture. By training the NeuralFMU, an attempt is made to learn the initial displacement of the referenceFMU. It can be clearly seen that the NeuralFMU learns this shift well in just a few training steps. ","category":"page"},{"location":"examples/simple_hybrid_CS/#Target-group","page":"Simple CS-NeuralFMU","title":"Target group","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The example is primarily intended for users who work in the field of first principle and/or hybrid modeling and are further interested in hybrid model building. The example wants to show how simple it is to combine FMUs with machine learning and to illustrate the advantages of this approach.","category":"page"},{"location":"examples/simple_hybrid_CS/#Other-formats","page":"Simple CS-NeuralFMU","title":"Other formats","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Besides this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/simple_hybrid_CS/#Getting-started","page":"Simple CS-NeuralFMU","title":"Getting started","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/#Installation-prerequisites","page":"Simple CS-NeuralFMU","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":" Description Command Alternative\n1. Enter Package Manager via ] \n2. Install FMI via add FMI add \" https://github.com/ThummeTo/FMI.jl \"\n3. Install FMIFlux via add FMIFlux add \" https://github.com/ThummeTo/FMIFlux.jl \"\n4. Install Flux via add Flux \n5. Install DifferentialEquations via add DifferentialEquations \n6. Install Plots via add Plots ","category":"page"},{"location":"examples/simple_hybrid_CS/#Code-section","page":"Simple CS-NeuralFMU","title":"Code section","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"# imports\nusing FMI\nusing FMIFlux\nusing Flux\nusing DifferentialEquations: Tsit5\nimport Plots","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"After importing the packages, the path to the Functional Mock-up Units (FMUs) is set. The FMU is a model exported meeting the Functional Mock-up Interface (FMI) Standard. The FMI is a free standard (fmi-standard.org) that defines a container and an interface to exchange dynamic models using a combination of XML files, binaries and C code zipped into a single file. ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The objec-orientated structure of the SpringPendulumExtForce1D can be seen in the following graphic. This model is a simple spring pendulum without friction, but with an external force. ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Here the path for the SpringPendulumExtForce1D is set: ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"pathFMU = joinpath(dirname(@__FILE__), \"../model/SpringPendulumExtForce1D.fmu\")\nprintln(\"FMU path: \", pathFMU)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"FMU path: ../model/SpringPendulumExtForce1D.fmu","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Next, the start time and end time of the simulation are set. Finally, a step size is specified to store the results of the simulation at these time steps.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"tStart = 0.0\ntStep = 0.01\ntStop = 5.0\ntSave = tStart:tStep:tStop","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"0.0:0.01:5.0","category":"page"},{"location":"examples/simple_hybrid_CS/#ReferenceFMU","page":"Simple CS-NeuralFMU","title":"ReferenceFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"In the next lines of code the FMU of the referenceFMU model is loaded and instantiated.  ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"referenceFMU = fmiLoad(pathFMU)\nfmiInstantiate!(referenceFMU; loggingOn=false)\nfmiInfo(referenceFMU)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"┌ Info: fmi2Unzip(...): Successfully unzipped 147 files at `C:\\Users\\JOHANN~1\\AppData\\Local\\Temp\\fmijl_ZVpiA1\\SpringPendulumExtForce1D`.\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:273\n┌ Info: fmi2Load(...): FMU supports both CS and ME, using CS as default if nothing specified.\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:376\n┌ Info: fmi2Load(...): FMU resources location is `file:///C:/Users/JOHANN~1/AppData/Local/Temp/fmijl_ZVpiA1/SpringPendulumExtForce1D/resources`\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:384\n\n\n#################### Begin information for FMU ####################\n\tModel name:\t\t\tSpringPendulumExtForce1D\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{b376bbba-5027-4429-a701-20b703fda94e}\n\tGeneration tool:\t\tDymola Version 2020x (64-bit), 2019-10-10\n\tGeneration time:\t\t2021-06-18T11:01:53Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t0\n\tInputs:\t\t\t\t1\n\t\t352321536 [\"extForce\"]\n\tOutputs:\t\t\t2\n\t\t335544320 [\"der(accSensor.v)\", \"a\", \"accSensor.a\"]\n\t\t335544321 [\"accSensor.v\", \"der(accSensor.flange.s)\", \"v\", \"der(speedSensor.flange.s)\", \"speedSensor.v\"]\n\tStates:\t\t\t\t2\n\t\t33554432 [\"mass.s\"]\n\t\t33554433 [\"mass.v\"]\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tSpringPendulumExtForce1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tSpringPendulumExtForce1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Both the start and end time are set via the fmiSetupExperiment() function. In addition, the initial position of the mass is set to a value of 13m  The experiment is initialized to get the information of the continuous states. You can get all continuous states of a FMU by the function fmiGetContinuousStates() and this is also done for the referenceFMU. It has two states: The first state is the previously initialized position of the mass, the second state is the velocity, which is initialized with 0fracms.   ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"fmiSetupExperiment(referenceFMU, tStart, tStop)\nfmiSetReal(referenceFMU, \"mass_s0\", 1.3)   # increase amplitude, invert phase\nfmiEnterInitializationMode(referenceFMU)\nfmiExitInitializationMode(referenceFMU)\n\nx₀ = fmiGetContinuousStates(referenceFMU)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"2-element Vector{Float64}:\n 1.3\n 0.0","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"In the following code block the referenceFMU is simulated, still specifying which variables are included. After the simulation is finished the result of the referenceFMU can be plotted. This plot also serves as a reference for the later CS-NeuralFMU model.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"vrs = [\"mass.s\", \"mass.v\", \"mass.a\"]\n_, referenceSimData = fmiSimulate(referenceFMU, tStart, tStop; recordValues=vrs, setup=false, reset=false, saveat=tSave)\nfmiPlot(referenceFMU, vrs, referenceSimData)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The data from the simualtion of the referenceFMU, are divided into position, velocity and acceleration data. The data for the acceleration will be needed later. ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"posReference = collect(data[1] for data in referenceSimData.saveval)\nvelReference = collect(data[2] for data in referenceSimData.saveval)\naccReference = collect(data[3] for data in referenceSimData.saveval)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"501-element Vector{Float64}:\n -1.9999999999999996\n -1.9989808107156004\n -1.995976332371232\n -1.9909821938997307\n -1.9839989801021418\n -1.9750314004124547\n -1.9640884504035183\n -1.951180580066516\n -1.9363227134824257\n -1.9195319560818125\n -1.9008203166719828\n -1.8802131771552166\n -1.8577245801802755\n  ⋮\n  1.9439538472626405\n  1.9581269688364755\n  1.970346615172437\n  1.9805952930006132\n  1.9888623187994514\n  1.9951388459819808\n  1.9994178648958127\n  2.0016968375647415\n  2.0019759530917005\n  2.0002523498984894\n  1.9965275218318568\n  1.9908049090723823","category":"page"},{"location":"examples/simple_hybrid_CS/#DefaultFMU","page":"Simple CS-NeuralFMU","title":"DefaultFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The following is a reset for the referenceFMU and a renaming to defaultFMU. After the reset, the previous initial position of the mass is not set, so the default position of the defaultFMU is used. The first state indicates the position of the mass, which is initilized with 05𝑚.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"fmiReset(referenceFMU)\ndefaultFMU = referenceFMU\n\nfmiSetupExperiment(defaultFMU, tStart, tStop)\nfmiEnterInitializationMode(defaultFMU)\nfmiExitInitializationMode(defaultFMU)\n\nx₀ = fmiGetContinuousStates(defaultFMU)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"2-element Vector{Float64}:\n 0.5\n 0.0","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The following simulate and plot the defaultFMU just like the referenceFMU. The differences between both systems can be clearly seen from the plots. In the plots for the defaultFMU you can see that other oscillations occur due to the different starting positions. On the one hand the oscillation of the defaultFMU starts in the opposite direction of the referenceFMU and on the other hand the graphs for the velocity and acceleration differ clearly in the amplitude. In the following we try to learn the initial shift of the position so that the graphs for the acceleration of both graphs match.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"_, defaultSimData = fmiSimulate(defaultFMU, tStart, tStop; recordValues=vrs, setup=false, reset=false, saveat=tSave)\nfmiPlot(defaultFMU, vrs, defaultSimData)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The data from the simualtion of the defaultFMU, are divided into position, velocity and acceleration data. The data for the acceleration will be needed later.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"posDefault = collect(data[1] for data in defaultSimData.saveval)\nvelDefault = collect(data[2] for data in defaultSimData.saveval)\naccDefault = collect(data[3] for data in defaultSimData.saveval)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"501-element Vector{Float64}:\n  6.0\n  5.996982513180007\n  5.987986261034271\n  5.9730046030442665\n  5.95205107717745\n  5.925151171646224\n  5.892330901036602\n  5.853619029884401\n  5.809060133574773\n  5.758686483925127\n  5.702562314755022\n  5.640726974472335\n  5.5732600661315335\n  ⋮\n -5.817454106640481\n -5.860262621029506\n -5.897211631373532\n -5.928264987575014\n -5.953392775960465\n -5.972564609104964\n -5.985762763815119\n -5.99297561097946\n -5.994196580640214\n -5.989425410415006\n -5.9786675103892755\n -5.961926527257058","category":"page"},{"location":"examples/simple_hybrid_CS/#CS-NeuralFMU","page":"Simple CS-NeuralFMU","title":"CS-NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"In this section, the defaultFMU is inserted into a CS-NeuralFMU architecture. It has the goal to learn the initial state of the referenceFMU.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"For the external force, a simple function is implemented that always returns a force of 0N at each time point. Also, all other functions and implementations would be possible here. Only for simplification reasons the function was chosen so simply.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"function extForce(t)\n    return [0.0]\nend ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"extForce (generic function with 1 method)","category":"page"},{"location":"examples/simple_hybrid_CS/#Loss-function","page":"Simple CS-NeuralFMU","title":"Loss function","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"In order to train our model, a loss function must be implemented. The solver of the NeuralFMU can calculate the gradient of the loss function. The gradient descent is needed to adjust the weights in the neural network so that the sum of the error is reduced and the model becomes more accurate.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The loss function in this implmentation consists of the mean squared error (mse) from the acceleration data of the referenceFMU simulation (accReference) and the acceleration data of the network (accNet). $ mse = \\frac{1}{n} \\sum\\limits_{i=0}^n (accReference[i] - accNet[i])^2 $","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"# loss function for training\nfunction lossSum()\n    solution = csNeuralFMU(extForce, tStep)\n\n    accNet = collect(data[1] for data in solution)\n    \n    Flux.Losses.mse(accReference, accNet)\nend","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"lossSum (generic function with 1 method)","category":"page"},{"location":"examples/simple_hybrid_CS/#Callback","page":"Simple CS-NeuralFMU","title":"Callback","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"To output the loss in certain time intervals, a callback is implemented as a function in the following. Here a counter is incremented, every twentieth pass the loss function is called and the average error is printed out.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"# callback function for training\nglobal counter = 0\nfunction callb()\n    global counter += 1\n\n    if counter % 20 == 1\n        avgLoss = lossSum()\n        @info \"Loss [$counter]: $(round(avgLoss, digits=5))\"\n    end\nend","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"callb (generic function with 1 method)","category":"page"},{"location":"examples/simple_hybrid_CS/#Structure-of-the-CS-NeuralFMU","page":"Simple CS-NeuralFMU","title":"Structure of the CS-NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"In the following, the topology of the CS-NeuralFMU is constructed. It consists of an input layer, which then leads into the defaultFMU model. The CS-FMU computes the outputs for the given system state and time step. After the defaultFMU follows a dense layer, which has exactly as many inputs as the model has outputs. The output of this layer consists of 16 output nodes and a tanh activation function. The next layer has 16 input and output nodes with the same activation function. The last layer is again a dense layer with 16 input nodes and the number of model outputs as output nodes. Here, it is important that no tanh-activation function follows, because otherwise the pendulums state values would be limited to the interval -11.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"# NeuralFMU setup\nnumInputs = length(defaultFMU.modelDescription.inputValueReferences)\nnumOutputs = length(defaultFMU.modelDescription.outputValueReferences)\n\nnet = Chain(inputs -> fmiInputDoStepCSOutput(defaultFMU, tStep, inputs),\n            Dense(numOutputs, 16, tanh),\n            Dense(16, 16, tanh),\n            Dense(16, numOutputs))","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Chain(\n  var\"#15#16\"(),\n  Dense(2, 16, tanh),                   \u001b[90m# 48 parameters\u001b[39m\n  Dense(16, 16, tanh),                  \u001b[90m# 272 parameters\u001b[39m\n  Dense(16, 2),                         \u001b[90m# 34 parameters\u001b[39m\n)\u001b[90m                   # Total: 6 arrays, \u001b[39m354 parameters, 1.758 KiB.","category":"page"},{"location":"examples/simple_hybrid_CS/#Definition-of-the-CS-NeuralFMU","page":"Simple CS-NeuralFMU","title":"Definition of the CS-NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"The instantiation of the CS-NeuralFMU is done as a one-liner. The FMU defaultFMU, the structure of the network net, start tStart and end time tStop, and the time steps tSave for saving are specified.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"csNeuralFMU = CS_NeuralFMU(defaultFMU, net, (tStart, tStop); saveat=tSave);","category":"page"},{"location":"examples/simple_hybrid_CS/#Plot-before-training","page":"Simple CS-NeuralFMU","title":"Plot before training","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Here the state trajactory of the extForceFMU is recorded. Doesn't really look like a pendulum yet, but the system is random initialized by default. In the later plots, the effect of learning can be seen.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"solutionBefore = csNeuralFMU(extForce, tStep)\nPlots.plot(tSave, collect(data[1] for data in solutionBefore), label=\"acc CS-NeuralFMU\", linewidth=2)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_CS/#Training-of-the-CS-NeuralFMU","page":"Simple CS-NeuralFMU","title":"Training of the CS-NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"For the training of the CS-NeuralFMU the parameters are extracted. The known ADAM optimizer for minimizing the gradient descent is used as further passing parameters. In addition, the previously defined loss and callback function, as well as the number of epochs are passed.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"# train\nparamsNet = Flux.params(csNeuralFMU)\n\noptim = ADAM()\nFlux.train!(lossSum, paramsNet, Iterators.repeated((), 300), optim; cb=callb)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"┌ Info: Loss [1]: 1.36812\n└ @ Main In[13]:8\n┌ Info: Loss [21]: 0.23761\n└ @ Main In[13]:8\n┌ Info: Loss [41]: 0.04257\n└ @ Main In[13]:8\n┌ Info: Loss [61]: 0.0265\n└ @ Main In[13]:8\n┌ Info: Loss [81]: 0.01623\n└ @ Main In[13]:8\n┌ Info: Loss [101]: 0.01005\n└ @ Main In[13]:8\n┌ Info: Loss [121]: 0.00617\n└ @ Main In[13]:8\n┌ Info: Loss [141]: 0.0038\n└ @ Main In[13]:8\n┌ Info: Loss [161]: 0.0024\n└ @ Main In[13]:8\n┌ Info: Loss [181]: 0.0016\n└ @ Main In[13]:8\n┌ Info: Loss [201]: 0.00113\n└ @ Main In[13]:8\n┌ Info: Loss [221]: 0.00086\n└ @ Main In[13]:8\n┌ Info: Loss [241]: 0.00069\n└ @ Main In[13]:8\n┌ Info: Loss [261]: 0.00058\n└ @ Main In[13]:8\n┌ Info: Loss [281]: 0.0005\n└ @ Main In[13]:8","category":"page"},{"location":"examples/simple_hybrid_CS/#Comparison-of-the-plots","page":"Simple CS-NeuralFMU","title":"Comparison of the plots","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Here three plots are compared with each other and only the acceleration of the mass is considered. The first plot represents the defaultFMU, the second represents the referenceFMU and the third plot represents the result after training the CS-NeuralFMU. ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"# plot results mass.a\nsolutionAfter = csNeuralFMU(extForce, tStep)\n\nfig = Plots.plot(xlabel=\"t [s]\", ylabel=\"mass acceleration [m/s^2]\", linewidth=2,\n                 xtickfontsize=12, ytickfontsize=12,\n                 xguidefontsize=12, yguidefontsize=12,\n                 legendfontsize=8, legend=:topright)\n\naccNeuralFMU = collect(data[1] for data in solutionAfter)\n\nPlots.plot!(fig, tSave, accDefault, label=\"defaultFMU\", linewidth=2)\nPlots.plot!(fig, tSave, accReference, label=\"referenceFMU\", linewidth=2)\nPlots.plot!(fig, tSave, accNeuralFMU, label=\"CS-NeuralFMU (300 eps.)\", linewidth=2)\nfig ","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Finally, the FMU is cleaned-up.","category":"page"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"fmiUnload(defaultFMU)","category":"page"},{"location":"examples/simple_hybrid_CS/#Summary","page":"Simple CS-NeuralFMU","title":"Summary","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"Based on the plots, it can be clearly seen that the CS-NeuralFMU model is able to learn the shift of the initial position. Even after only 300 runs, the curves overlap very much, so no further training with more runs is needed.","category":"page"},{"location":"examples/simple_hybrid_CS/#Source","page":"Simple CS-NeuralFMU","title":"Source","text":"","category":"section"},{"location":"examples/simple_hybrid_CS/","page":"Simple CS-NeuralFMU","title":"Simple CS-NeuralFMU","text":"[1] Tobias Thummerer, Lars Mikelsons and Josef Kircher. 2021. NeuralFMU: towards structural integration of FMUs into neural networks. Martin Sjölund, Lena Buffoni, Adrian Pop and Lennart Ochel (Ed.). Proceedings of 14th Modelica Conference 2021, Linköping, Sweden, September 20-24, 2021. Linköping University Electronic Press, Linköping (Linköping Electronic Conference Proceedings ; 181), 297-306. DOI: 10.3384/ecp21181297","category":"page"},{"location":"contents/","page":"Contents","title":"Contents","text":"Pages = [\"index.md\", \"library.md\", \"fmu2.md\", \"parameterize.md\", \"simulateCS.md\", \"simulateME.md\"]","category":"page"},{"location":"related/#Related-Publications","page":"Related Publications","title":"Related Publications","text":"","category":"section"},{"location":"related/","page":"Related Publications","title":"Related Publications","text":"Thummerer T, Kircher J and Mikelsons L: Neural FMU: Towards structual integration of FMUs into neural networks (Preprint, accepted 14th International Modelica Conference) pdf|DOI","category":"page"},{"location":"related/","page":"Related Publications","title":"Related Publications","text":"Thummerer T, Tintenherr J, Mikelsons L: Hybrid modeling of the human cardiovascular system using NeuralFMUs (Preprint, accepted 10th International Conference on Mathematical Modeling in Physical Sciences) pdf|DOI","category":"page"},{"location":"examples/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"This section discusses the included examples of the FMIFlux.jl library. So you can execute them on your machine and get detailed information about all of the steps. If you require further information about the function calls, see library functions section. For more information related to the setup and simulation of an FMU see FMI.jl library.","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"The examples are:","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Simple hybrid CS: Showing how to train a Neural CS FMU.\nsimple hybrid ME: Showing how to train a Neural ME FMU.\nadvanced hybrid ME: Showing how to train an advanced Neural ME FMU.","category":"page"},{"location":"tutorials/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"tutorials/overview/","page":"Overview","title":"Overview","text":"This section gives an overview and short examples on how to work with the FMIFlux.jl library. For further advise on working with FMUs, it is recommended to check the Documentation of the FMI.jl library","category":"page"},{"location":"tutorials/overview/","page":"Overview","title":"Overview","text":"The tutorials are grouped as followed:","category":"page"},{"location":"tutorials/overview/","page":"Overview","title":"Overview","text":"Still work in progress\nHow to set up a neural FMU\nHow to train a neural FMU\nPlot the results","category":"page"},{"location":"examples/simple_hybrid_ME/#Creation-and-training-of-ME-NeuralFMUs","page":"Simple ME-NeuralFMU","title":"Creation and training of ME-NeuralFMUs","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Tutorial by Johannes Stoljar, Tobias Thummerer","category":"page"},{"location":"examples/simple_hybrid_ME/#License","page":"Simple ME-NeuralFMU","title":"License","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Johannes Stoljar","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Licensed under the MIT license. See LICENSE file in the project root for details.","category":"page"},{"location":"examples/simple_hybrid_ME/#Motivation","page":"Simple ME-NeuralFMU","title":"Motivation","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"This Julia Package is motivated by the application of hybrid modeling. This package enables the user to integrate his simulation model between neural networks (NeuralFMU). For this, the simulation model must be exported as FMU (functional mock-up unit), which corresponds to a widely used standard. The big advantage of hybrid modeling with artificial neural networks is, that effects that are difficult to model (because they might be unknown) can be easily learned by the neural networks. For this purpose, the NeuralFMU is trained with measurement data containing the unmodeled physical effect. The final product is a simulation model including the orignially unmodeled effects. Another big advantage of the NeuralFMU is that it works with little data, because the FMU already contains the characterisitic functionality of the simulation and only the missing effects are added.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"NeuralFMUs need not to be as easy as in this example. Basically a NeuralFMU can combine different ANN topologies that manipulate any FMU-input (system state, system inputs, time) and any FMU-output (system state derivative, system outputs, other system variables). However, for this example a NeuralFMU topology as shown in the following picture is used.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: NeuralFMU.svg)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"NeuralFMU (ME) from [1].","category":"page"},{"location":"examples/simple_hybrid_ME/#Introduction-to-the-example","page":"Simple ME-NeuralFMU","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"In this example, simplified modeling of a one-dimensional spring pendulum (without friction) is compared to a model of the same system that includes a nonlinear friction model. The FMU with the simplified model will be named simpleFMU in the following and the model with the friction will be named realFMU. At the beginning, the actual state of both simulations is shown, whereby clear deviations can be seen in the graphs. The realFMU serves as a reference graph. The simpleFMU is then integrated into a NeuralFMU architecture and a training of the entire network is performed. After the training the final state is compared again to the realFMU. It can be clearly seen that by using the NeuralFMU, learning of the friction process has taken place.  ","category":"page"},{"location":"examples/simple_hybrid_ME/#Target-group","page":"Simple ME-NeuralFMU","title":"Target group","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The example is primarily intended for users who work in the field of first principle and/or hybrid modeling and are further interested in hybrid model building. The example wants to show how simple it is to combine FMUs with machine learning and to illustrate the advantages of this approach.","category":"page"},{"location":"examples/simple_hybrid_ME/#Other-formats","page":"Simple ME-NeuralFMU","title":"Other formats","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Besides this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/simple_hybrid_ME/#Getting-started","page":"Simple ME-NeuralFMU","title":"Getting started","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/#Installation-prerequisites","page":"Simple ME-NeuralFMU","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":" Description Command Alternative\n1. Enter Package Manager via ] \n2. Install FMI via add FMI add \" https://github.com/ThummeTo/FMI.jl \"\n3. Install FMIFlux via add FMIFlux add \" https://github.com/ThummeTo/FMIFlux.jl \"\n4. Install Flux via add Flux \n5. Install DifferentialEquations via add DifferentialEquations \n6. Install Plots via add Plots ","category":"page"},{"location":"examples/simple_hybrid_ME/#Code-section","page":"Simple ME-NeuralFMU","title":"Code section","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"# imports\nusing FMI\nusing FMIFlux\nusing Flux\nusing DifferentialEquations: Tsit5\nimport Plots","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"After importing the packages, the path to the Functional Mock-up Units (FMUs) is set. The FMU is a model exported meeting the Functional Mock-up Interface (FMI) Standard. The FMI is a free standard (fmi-standard.org) that defines a container and an interface to exchange dynamic models using a combination of XML files, binaries and C code zipped into a single file. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The objec-orientated structure of the SpringPendulum1D (simpleFMU) can be seen in the following graphic and corresponds to a simple modeling.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"In contrast, the model SpringFrictionPendulum1D (realFMU) is somewhat more accurate, because it includes a friction component. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Here the path for the SpringPendulum1D and the SpringFrictionPendulum1D model is set: ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"simpleFMUPath = joinpath(dirname(@__FILE__), \"../model/SpringPendulum1D.fmu\")\nrealFMUPath = joinpath(dirname(@__FILE__), \"../model/SpringFrictionPendulum1D.fmu\")\nprintln(\"SimpleFMU path: \", simpleFMUPath)\nprintln(\"RealFMU path: \", realFMUPath)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"SimpleFMU path: ../model/SpringPendulum1D.fmu\nRealFMU path: ../model/SpringFrictionPendulum1D.fmu","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Next, the start time and end time of the simulation are set. Finally, a step size is specified to store the results of the simulation at these time steps.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"tStart = 0.0\ntStep = 0.01\ntStop = 5.0\ntSave = collect(tStart:tStep:tStop)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"501-element Vector{Float64}:\n 0.0\n 0.01\n 0.02\n 0.03\n 0.04\n 0.05\n 0.06\n 0.07\n 0.08\n 0.09\n 0.1\n 0.11\n 0.12\n ⋮\n 4.89\n 4.9\n 4.91\n 4.92\n 4.93\n 4.94\n 4.95\n 4.96\n 4.97\n 4.98\n 4.99\n 5.0","category":"page"},{"location":"examples/simple_hybrid_ME/#RealFMU","page":"Simple ME-NeuralFMU","title":"RealFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"In the next lines of code the FMU of the realFMU model is loaded and instantiated.  ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"realFMU = fmiLoad(realFMUPath)\nfmiInstantiate!(realFMU; loggingOn=false)\nfmiInfo(realFMU)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"┌ Info: fmi2Unzip(...): Successfully unzipped 28 files at `C:\\Users\\JOHANN~1\\AppData\\Local\\Temp\\fmijl_xMsNGp\\SpringFrictionPendulum1D`.\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:273\n┌ Info: fmi2Load(...): FMU supports both CS and ME, using CS as default if nothing specified.\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:376\n\n\n#################### Begin information for FMU ####################\n\tModel name:\t\t\tSpringFrictionPendulum1D\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{b02421b8-652a-4d48-9ffc-c2b223aa1b94}\n\tGeneration tool:\t\tDymola Version 2020x (64-bit), 2019-10-10\n\tGeneration time:\t\t2021-11-23T13:36:30Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t24\n\tInputs:\t\t\t\t0\n\tOutputs:\t\t\t0\n\tStates:\t\t\t\t2\n\n\n┌ Info: fmi2Load(...): FMU resources location is `file:///C:/Users/JOHANN~1/AppData/Local/Temp/fmijl_xMsNGp/SpringFrictionPendulum1D/resources`\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:384\n\n\n\t\t33554432 [\"mass.s\"]\n\t\t33554433 [\"mass.v\", \"mass.v_relfric\"]\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tSpringFrictionPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tSpringFrictionPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Both the start and end time are set via the fmiSetupExperiment() function. The experiment is initialized to get the information of the continuous states. You can get all continuous states of a FMU by the function fmiGetContinuousStates() and this is also done for the realFMU. It has two states: The first state is the position of the mass, which is initilized with 05m, the second state is the velocity, which is initialized with 0fracms.   ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"fmiSetupExperiment(realFMU, tStart, tStop)\n\nfmiEnterInitializationMode(realFMU)\nfmiExitInitializationMode(realFMU)\n\nx₀ = fmiGetContinuousStates(realFMU)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"2-element Vector{Float64}:\n 0.5\n 0.0","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"In the following code block the realFMU is simulated, still specifying which variables are included. After the simulation is finished the result of the realFMU can be plotted. This plot also serves as a reference for the other model (simpleFMU).","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"vrs = [\"mass.s\", \"mass.v\", \"mass.a\", \"mass.f\"]\n_, realSimData = fmiSimulate(realFMU, tStart, tStop; recordValues=vrs, saveat=tSave, setup=false, reset=false)\nfmiPlot(realFMU, vrs, realSimData)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"After the plots are created, the FMU is unloaded.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"fmiUnload(realFMU)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The data from the simualtion of the realFMU, are divided into position and velocity data. These data will be needed later. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"velReal = collect(data[2] for data in realSimData.saveval)\nposReal = collect(data[1] for data in realSimData.saveval)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"501-element Vector{Float64}:\n 0.5\n 0.5002147350958549\n 0.5008572068150906\n 0.5019307343013393\n 0.5034377791759037\n 0.5053797361931734\n 0.507757421354132\n 0.5105710760625108\n 0.5138202661486302\n 0.5175035429290001\n 0.5216187663581402\n 0.5261643784845171\n 0.5311361825547609\n ⋮\n 1.0618338496933084\n 1.0629441718413108\n 1.0639256972572486\n 1.0647763670106132\n 1.06549412855799\n 1.0660771282511987\n 1.066523587371857\n 1.066831801521633\n 1.0670001400125004\n 1.0670339828286313\n 1.0670339828276312\n 1.067033982826631","category":"page"},{"location":"examples/simple_hybrid_ME/#SimpleFMU","page":"Simple ME-NeuralFMU","title":"SimpleFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The following lines load, instantiate, simulate and plot the simpleFMU just like the realFMU. The differences between both systems can be clearly seen from the plots. In the plot for the realFMU it can be seen that the oscillation continues to decrease due to the effect of the friction. If you would simulate long enough, the oscillation would come to a standstill in a certain time. The oscillation in the simpleFMU behaves differently, since the friction was not taken into account here. The oscillation in this model would continue to infinity with the same oscillation amplitude. From this observation the desire of an improvement of this model arises.     ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"simpleFMU = fmiLoad(simpleFMUPath)\n\nfmiInstantiate!(simpleFMU; loggingOn=false)\nfmiInfo(simpleFMU)\n\nvrs = [\"mass.s\", \"mass.v\", \"mass.a\"]\n_, simpleSimData = fmiSimulate(simpleFMU, tStart, tStop; recordValues=vrs, saveat=tSave, reset=false)\nfmiPlot(simpleFMU, vrs, simpleSimData)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"┌ Info: fmi2Unzip(...): Successfully unzipped 28 files at `C:\\Users\\JOHANN~1\\AppData\\Local\\Temp\\fmijl_waNZuu\\SpringPendulum1D`.\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:273\n\n\n#################### Begin information for FMU ####################\n\tModel name:\t\t\tSpringPendulum1D\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{5030e5a4-87c0-42cf-8779-74ebea1906aa}\n\tGeneration tool:\t\tDymola Version 2020x (64-bit), 2019-10-10\n\tGeneration time:\t\t2021-07-21T05:28:53Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t0\n\tInputs:\t\t\t\t0\n\tOutputs:\t\t\t0\n\tStates:\t\t\t\t2\n\t\t33554432 [\"mass.s\"]\n\t\t33554433 [\"mass.v\"]\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tSpringPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tSpringPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################\n\n┌ Info: fmi2Load(...): FMU supports both CS and ME, using CS as default if nothing specified.\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:376\n┌ Info: fmi2Load(...): FMU resources location is `file:///C:/Users/JOHANN~1/AppData/Local/Temp/fmijl_waNZuu/SpringPendulum1D/resources`\n└ @ FMI C:\\Users\\Johannes Stoljar\\.julia\\packages\\FMI\\l4qPg\\src\\FMI2.jl:384","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The data from the simualtion of the simpleFMU, are divided into position and velocity data. These data will be needed later to plot the results. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"velSimple = collect(data[2] for data in simpleSimData.saveval)\nposSimple = collect(data[1] for data in simpleSimData.saveval)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"501-element Vector{Float64}:\n 0.5\n 0.5003017486819993\n 0.5012013738965729\n 0.5026995396955733\n 0.5047948922822549\n 0.5074848828353776\n 0.5107669098963398\n 0.5146380970115599\n 0.5190939866425227\n 0.5241313516074874\n 0.5297437685244978\n 0.5359273025527665\n 0.5426739933868466\n ⋮\n 1.6817454106640481\n 1.6860262621029507\n 1.6897211631373532\n 1.6928264987575015\n 1.6953392775960465\n 1.6972564609104965\n 1.698576276381512\n 1.6992975610979462\n 1.6994196580640215\n 1.6989425410415007\n 1.6978667510389276\n 1.6961926527257059","category":"page"},{"location":"examples/simple_hybrid_ME/#NeuralFMU","page":"Simple ME-NeuralFMU","title":"NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/#Loss-function","page":"Simple ME-NeuralFMU","title":"Loss function","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"In order to train our model, a loss function must be implemented. The solver of the NeuralFMU can calculate the gradient of the loss function. The gradient descent is needed to adjust the weights in the neural network so that the sum of the error is reduced and the model becomes more accurate.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The loss function in this implmentation consists of the mean squared error (mse) from the real position of the realFMU simulation (posReal) and the position data of the network (posNet). $ mse = \\frac{1}{n} \\sum\\limits_{i=0}^n (posReal[i] - posNet[i])^2 $","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"As it is indicated with the comments, one could also additionally consider the mse from the real velocity (velReal) and the velocity from the network (velNet). The error in this case would be calculated from the sum of both errors.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"# loss function for training\nfunction lossSum()\n    solution = neuralFMU(x₀, tStart)\n\n    posNet = collect(data[1] for data in solution.u)\n    #velNet = collect(data[2] for data in solution.u)\n\n    Flux.Losses.mse(posReal, posNet) #+ Flux.Losses.mse(velReal, velNet)\nend","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"lossSum (generic function with 1 method)","category":"page"},{"location":"examples/simple_hybrid_ME/#Callback","page":"Simple ME-NeuralFMU","title":"Callback","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"To output the loss in certain time intervals, a callback is implemented as a function in the following. Here a counter is incremented, every twentieth pass the loss function is called and the average error is printed out.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"# callback function for training\nglobal counter = 0\nfunction callb()\n    global counter += 1\n\n    if counter % 20 == 1\n        avgLoss = lossSum()\n        @info \"Loss [$counter]: $(round(avgLoss, digits=5))   Avg displacement in data: $(round(sqrt(avgLoss), digits=5))\"\n    end\nend","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"callb (generic function with 1 method)","category":"page"},{"location":"examples/simple_hybrid_ME/#Structure-of-the-NeuralFMU","page":"Simple ME-NeuralFMU","title":"Structure of the NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"In the following, the topology of the NeuralFMU is constructed. It consists of an input layer, which then leads into the simpleFMU model. The ME-FMU computes the state derivatives for a given system state. Following the simpleFMU is a dense layer that has exactly as many inputs as the model has states (and therefore state derivatives). The output of this layer consists of 16 output nodes and a tanh activation function. The next layer has 16 input and output nodes with the same activation function. The last layer is again a dense layer with 16 input nodes and the number of states as outputs. Here, it is important that no tanh-activation function follows, because otherwise the pendulums state values would be limited to the interval -11.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"# NeuralFMU setup\nnumStates = fmiGetNumberOfStates(simpleFMU)\n\nnet = Chain(inputs -> fmiDoStepME(simpleFMU, inputs),\n            Dense(numStates, 16, tanh),\n            Dense(16, 16, tanh),\n            Dense(16, numStates))","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Chain(\n  var\"#11#12\"(),\n  Dense(2, 16, tanh),                   \u001b[90m# 48 parameters\u001b[39m\n  Dense(16, 16, tanh),                  \u001b[90m# 272 parameters\u001b[39m\n  Dense(16, 2),                         \u001b[90m# 34 parameters\u001b[39m\n)\u001b[90m                   # Total: 6 arrays, \u001b[39m354 parameters, 1.758 KiB.","category":"page"},{"location":"examples/simple_hybrid_ME/#Definition-of-the-NeuralFMU","page":"Simple ME-NeuralFMU","title":"Definition of the NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"The instantiation of the ME-NeuralFMU is done as a one-liner. The FMU (simpleFMU), the structure of the network net, start tStart and end time tStop, the numerical solver Tsit5() and the time steps tSave for saving are specified.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"neuralFMU = ME_NeuralFMU(simpleFMU, net, (tStart, tStop), Tsit5(); saveat=tSave);","category":"page"},{"location":"examples/simple_hybrid_ME/#Plot-before-training","page":"Simple ME-NeuralFMU","title":"Plot before training","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Here the state trajactory of the simpleFMU is recorded. Doesn't really look like a pendulum yet, but the system is random initialized by default. In the later plots, the effect of learning can be seen.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"solutionBefore = neuralFMU(x₀, tStart)\nfmiPlot(simpleFMU, solutionBefore)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/#Training-of-the-NeuralFMU","page":"Simple ME-NeuralFMU","title":"Training of the NeuralFMU","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"For the training of the NeuralFMU the parameters are extracted. The known ADAM optimizer for minimizing the gradient descent is used as further passing parameters. In addition, the previously defined loss and callback function, as well as the number of epochs are passed.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"# train\nparamsNet = Flux.params(neuralFMU)\n\noptim = ADAM()\nFlux.train!(lossSum, paramsNet, Iterators.repeated((), 300), optim; cb=callb) ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"┌ Info: Loss [1]: 0.07528   Avg displacement in data: 0.27437\n└ @ Main In[12]:8\n┌ Info: Loss [21]: 0.04558   Avg displacement in data: 0.2135\n└ @ Main In[12]:8\n┌ Info: Loss [41]: 0.04354   Avg displacement in data: 0.20867\n└ @ Main In[12]:8\n┌ Info: Loss [61]: 0.04236   Avg displacement in data: 0.20582\n└ @ Main In[12]:8\n┌ Info: Loss [81]: 0.04193   Avg displacement in data: 0.20478\n└ @ Main In[12]:8\n┌ Info: Loss [101]: 0.04153   Avg displacement in data: 0.20379\n└ @ Main In[12]:8\n┌ Info: Loss [121]: 0.04094   Avg displacement in data: 0.20233\n└ @ Main In[12]:8\n┌ Info: Loss [141]: 0.04003   Avg displacement in data: 0.20008\n└ @ Main In[12]:8\n┌ Info: Loss [161]: 0.03917   Avg displacement in data: 0.19793\n└ @ Main In[12]:8\n┌ Info: Loss [181]: 0.03808   Avg displacement in data: 0.19515\n└ @ Main In[12]:8\n┌ Info: Loss [201]: 0.03616   Avg displacement in data: 0.19016\n└ @ Main In[12]:8\n┌ Info: Loss [221]: 0.0313   Avg displacement in data: 0.17692\n└ @ Main In[12]:8\n┌ Info: Loss [241]: 0.01322   Avg displacement in data: 0.11497\n└ @ Main In[12]:8\n┌ Info: Loss [261]: 0.006   Avg displacement in data: 0.07743\n└ @ Main In[12]:8\n┌ Info: Loss [281]: 0.00461   Avg displacement in data: 0.06793\n└ @ Main In[12]:8","category":"page"},{"location":"examples/simple_hybrid_ME/#Comparison-of-the-plots","page":"Simple ME-NeuralFMU","title":"Comparison of the plots","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Here three plots are compared with each other and only the position of the mass is considered. The first plot represents the simpleFMU, the second represents the realFMU (reference) and the third plot represents the result after training the NeuralFMU. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"# plot results mass.s\nsolutionAfter = neuralFMU(x₀, tStart)\n\nfig = Plots.plot(xlabel=\"t [s]\", ylabel=\"mass position [m]\", linewidth=2,\n                 xtickfontsize=12, ytickfontsize=12,\n                 xguidefontsize=12, yguidefontsize=12,\n                 legendfontsize=8, legend=:topright)\n\nposNeuralFMU = collect(data[1] for data in solutionAfter.u)\n\nPlots.plot!(fig, tSave, posSimple, label=\"SimpleFMU\", linewidth=2)\nPlots.plot!(fig, tSave, posReal, label=\"RealFMU\", linewidth=2)\nPlots.plot!(fig, tSave, posNeuralFMU, label=\"NeuralFMU (300 epochs)\", linewidth=2)\nfig ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/#Continue-training-and-plotting","page":"Simple ME-NeuralFMU","title":"Continue training and plotting","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"As can be seen from the previous figure, the plot of the NeuralFMU has not yet fully converged against the realFMU, so the training of the NeuralFMU is continued. After further training, the plot of NeuralFMU is added to the figure again. The effect of the longer training is well recognizable, since the plot of the NeuralFMU had further converged. ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Flux.train!(lossSum, paramsNet, Iterators.repeated((), 700), optim; cb=callb) \n# plot results mass.s\nsolutionAfter = neuralFMU(x₀, tStart)\nposNeuralFMU = collect(data[1] for data in solutionAfter.u)\nPlots.plot!(fig, tSave, posNeuralFMU, label=\"NeuralFMU (1000 epochs)\", linewidth=2)\nfig ","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"┌ Info: Loss [301]: 0.00412   Avg displacement in data: 0.06419\n└ @ Main In[12]:8\n┌ Info: Loss [321]: 0.00379   Avg displacement in data: 0.0616\n└ @ Main In[12]:8\n┌ Info: Loss [341]: 0.0035   Avg displacement in data: 0.05918\n└ @ Main In[12]:8\n┌ Info: Loss [361]: 0.00322   Avg displacement in data: 0.05673\n└ @ Main In[12]:8\n┌ Info: Loss [381]: 0.00295   Avg displacement in data: 0.05432\n└ @ Main In[12]:8\n┌ Info: Loss [401]: 0.0027   Avg displacement in data: 0.05199\n└ @ Main In[12]:8\n┌ Info: Loss [421]: 0.00246   Avg displacement in data: 0.04961\n└ @ Main In[12]:8\n┌ Info: Loss [441]: 0.00223   Avg displacement in data: 0.04724\n└ @ Main In[12]:8\n┌ Info: Loss [461]: 0.00201   Avg displacement in data: 0.0448\n└ @ Main In[12]:8\n┌ Info: Loss [481]: 0.00179   Avg displacement in data: 0.04236\n└ @ Main In[12]:8\n┌ Info: Loss [501]: 0.00159   Avg displacement in data: 0.03988\n└ @ Main In[12]:8\n┌ Info: Loss [521]: 0.0014   Avg displacement in data: 0.03736\n└ @ Main In[12]:8\n┌ Info: Loss [541]: 0.00121   Avg displacement in data: 0.03481\n└ @ Main In[12]:8\n┌ Info: Loss [561]: 0.00104   Avg displacement in data: 0.03221\n└ @ Main In[12]:8\n┌ Info: Loss [581]: 0.00087   Avg displacement in data: 0.02957\n└ @ Main In[12]:8\n┌ Info: Loss [601]: 0.00072   Avg displacement in data: 0.02692\n└ @ Main In[12]:8\n┌ Info: Loss [621]: 0.00059   Avg displacement in data: 0.02432\n└ @ Main In[12]:8\n┌ Info: Loss [641]: 0.00048   Avg displacement in data: 0.02189\n└ @ Main In[12]:8\n┌ Info: Loss [661]: 0.00039   Avg displacement in data: 0.01966\n└ @ Main In[12]:8\n┌ Info: Loss [681]: 0.00031   Avg displacement in data: 0.01768\n└ @ Main In[12]:8\n┌ Info: Loss [701]: 0.00026   Avg displacement in data: 0.01598\n└ @ Main In[12]:8\n┌ Info: Loss [721]: 0.00021   Avg displacement in data: 0.01447\n└ @ Main In[12]:8\n┌ Info: Loss [741]: 0.00017   Avg displacement in data: 0.01323\n└ @ Main In[12]:8\n┌ Info: Loss [761]: 0.00015   Avg displacement in data: 0.0123\n└ @ Main In[12]:8\n┌ Info: Loss [781]: 0.00013   Avg displacement in data: 0.01157\n└ @ Main In[12]:8\n┌ Info: Loss [801]: 0.00012   Avg displacement in data: 0.01099\n└ @ Main In[12]:8\n┌ Info: Loss [821]: 0.00011   Avg displacement in data: 0.01054\n└ @ Main In[12]:8\n┌ Info: Loss [841]: 0.0001   Avg displacement in data: 0.01017\n└ @ Main In[12]:8\n┌ Info: Loss [861]: 0.0001   Avg displacement in data: 0.00983\n└ @ Main In[12]:8\n┌ Info: Loss [881]: 9.0e-5   Avg displacement in data: 0.00958\n└ @ Main In[12]:8\n┌ Info: Loss [901]: 9.0e-5   Avg displacement in data: 0.00936\n└ @ Main In[12]:8\n┌ Info: Loss [921]: 8.0e-5   Avg displacement in data: 0.00917\n└ @ Main In[12]:8\n┌ Info: Loss [941]: 8.0e-5   Avg displacement in data: 0.00901\n└ @ Main In[12]:8\n┌ Info: Loss [961]: 8.0e-5   Avg displacement in data: 0.00887\n└ @ Main In[12]:8\n┌ Info: Loss [981]: 8.0e-5   Avg displacement in data: 0.00875\n└ @ Main In[12]:8","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"(Image: svg)","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Finally, the FMU is cleaned-up.","category":"page"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"fmiUnload(simpleFMU)","category":"page"},{"location":"examples/simple_hybrid_ME/#Summary","page":"Simple ME-NeuralFMU","title":"Summary","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"Based on the plots, it can be seen that the NeuralFMU is able to adapt the friction model of the realFMU. After 300 runs, the curves do not overlap very well, but this can be achieved by longer training (1000 runs) or a better initialization.","category":"page"},{"location":"examples/simple_hybrid_ME/#Source","page":"Simple ME-NeuralFMU","title":"Source","text":"","category":"section"},{"location":"examples/simple_hybrid_ME/","page":"Simple ME-NeuralFMU","title":"Simple ME-NeuralFMU","text":"[1] Tobias Thummerer, Lars Mikelsons and Josef Kircher. 2021. NeuralFMU: towards structural integration of FMUs into neural networks. Martin Sjölund, Lena Buffoni, Adrian Pop and Lennart Ochel (Ed.). Proceedings of 14th Modelica Conference 2021, Linköping, Sweden, September 20-24, 2021. Linköping University Electronic Press, Linköping (Linköping Electronic Conference Proceedings ; 181), 297-306. DOI: 10.3384/ecp21181297","category":"page"},{"location":"#FMIFlux.jl-Documentation","page":"Introduction","title":"FMIFlux.jl Documentation","text":"","category":"section"},{"location":"#What-is-FMIFlux.jl?","page":"Introduction","title":"What is FMIFlux.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FMIFlux.jl is a free-to-use software library for the Julia programming language, which offers the ability to setup NeuralFMUs: You can place FMUs (fmi-standard.org) simply inside any feed-forward NN topology and still keep the resulting hybrid model trainable with a standard AD training process.","category":"page"},{"location":"#How-can-I-install-FMIFlux.jl?","page":"Introduction","title":"How can I install FMIFlux.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"open a Julia-Command-Window, activate your preferred environment\ngo to package manager using ] and type add FMIFlux","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]\n\n(v.1.5.4)> add FMIFlux","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you want to check that everything works correctly, you can run the tests bundled with FMIFlux.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\n\njulia> Pkg.test(\"FMIFlux\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Additionally, you can check the version of FMIFlux.jl that you have installed with the status command.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]\n(v.1.5.4)> status FMIFlux","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Throughout the rest of the tutorial we assume that you have installed the FMIFlux.jl package and have typed using FMIFlux which loads the package:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using FMIFlux","category":"page"},{"location":"#How-the-documentation-is-structured?","page":"Introduction","title":"How the documentation is structured?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Having a high-level overview of how this documentation is structured will help you know where to look for certain things. The three main parts of the documentation are :","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The Tutorials section explains all the necessary steps to work with the library.\nThe examples section gives insight in what is possible with this Library while using short and easily understandable code snippets\nThe library functions sections contains all the documentation to the functions provided by this library","category":"page"},{"location":"#What-is-currently-supported-in-FMIFlux.jl?","page":"Introduction","title":"What is currently supported in FMIFlux.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"building and training ME-NeuralFMUs with the default Flux-Front-End\nbuilding and training CS-NeuralFMUs","category":"page"},{"location":"#What-is-under-development-in-FMIFlux.jl?","page":"Introduction","title":"What is under development in FMIFlux.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"different modes for sensitivity estimation\ndocumentation\nmore examples","category":"page"},{"location":"#FMIFlux.jl-Index","page":"Introduction","title":"FMIFlux.jl Index","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"}]
}
